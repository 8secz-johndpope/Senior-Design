from bs4 import BeautifulSoup as bs
from GyazoObject import GyazoObj
import os
import pandas as pd
import requests
from selenium import webdriver
from selenium.webdriver.firefox.options import Options
import shutil
import time
from urllib.request import urlopen, Request

icos = pd.read_csv('whitepapers_original.csv')

#TODO
'''
loop through every ico
if no images throw red flag
if no social media throw red flag
discuss what would constitute a red flag on a reverse image search
'''

class Google():
    def __init__(self):
        self.google_path = 'images.google.com/searchbyimage?image_url='
        self.gyazo = GyazoObj()
        self.root_dir = '/Users/noahquinones/Desktop/Senior_Project/Senior-Design/Reverse_Image_Search/data/'
        self.geckodrv = '/Users/noahquinones/Desktop/Senior_Project/Senior-Design/Reverse_Image_Search/geckodriver'

    def get_df(self, d):
        target = self.root_dir + d
        if os.path.isdir(target):
            os.chdir(target)
            print(d)
            if os.path.exists(d + '.csv'):
                df = pd.read_csv(d + '.csv')
                return df
            else:
                temp_df = pd.DataFrame()

    def useSelenium(self, path):
        options = Options()
        options.headless = True
        driver = webdriver.Firefox(options=options, executable_path=self.geckodrv)
        driver.get(path)
        target = driver.find_element_by_id('cnt')
        html = target.get_attribute('innerHTML')
        driver.quit()
        return html

    def reverseImageSearch(self, gyazo_url):
        google_path = 'https://images.google.com/searchbyimage?image_url='
        full_path = google_path + gyazo_url
        html = self.useSelenium(full_path)
        soup = bs(html, 'lxml')
        targets = soup.find_all('div', {'class':'g'})

    def verifyAll(self):
        dirs = sorted(os.listdir(self.root_dir), key=lambda x: str.lower(x))
        for d in dirs:
            df = self.get_df(d)
            if df.empty:
                print('RED FLAG')
            else:
                for index, row in df.iterrows():
                    img_file = row['Image File']
                    if img_file != 'N\A':
                        img_obj = self.gyazo.upload(img_file)
                        url = img_obj.url
                        self.reverseImageSearch(url)
                        break
                    else:
                        print('MIGHT BE RED FLAG')
                break
                os.chdir('..')

    #Attempt #3134: this is getting annoying...
    def search_crypto_name_in_results(self, cryto_name, path):
        raw_html = requests.get(path,stream=True).content
        html = bs(raw_html, 'html.parser')
        print(html)

    #Note, possibly consider searching LinkedIn names using selenium 
    def verify_social_media(self):
        #return list of directories generated by icobench.py
        dirs = sorted(os.listdir(self.root_dir), key=lambda x: str.lower(x))
        #for every directory in the list grab corresponding csv file
        for d in dirs:
            df = self.get_df(d)
            #empty-> no social media (or images) -> throw RED FLAG 
            if df.empty:
                print('RED FLAG') #need to throw red flag (should be considered highly suspicious)
            else:
                #else lets examine csv contents
                for index, row in df.iterrows():
                    social_media_file = row['Social Media File']
                    #no social media file-> throw red flag? (lower in severity then no csv)
                    if social_media_file == 'N/A':
                        print('POSSIBLE RED FLAG')
                    else:
                        social_media_links = []
                        with open(social_media_file, 'r') as s_m_f:
                            for line in s_m_f:
                                social_media_links.append(line[line.find('|')+1:line.rfind('\n')]) #ewwwwwww, nasty one liner
                        #iterate through social media-links
                        #TODO: need to create Team (or Person, however this would be heavy) object to maintain flags
                        crypto_mentioned = False
                        for path in social_media_links:
                            self.search_crypto_name_in_results(d, path)

                break
                os.chdir('..')

    def verifyICO(self, ico_name):
        # verify the legitamacy of an individual ico
        pass

client = Google()
client.verifyAll()
client.verify_social_media()
